#!/bin/bash

# Script de configuration et compilation des blocs personnalisÃ©s
# Ce script installe les dÃ©pendances et compile les assets

set -e

echo "ðŸš€ Configuration des blocs personnalisÃ©s WordPress..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier si nous sommes dans le bon rÃ©pertoire
if [ ! -f "package.json" ]; then
    print_error "package.json non trouvÃ©. Veuillez exÃ©cuter ce script depuis le rÃ©pertoire du thÃ¨me."
    exit 1
fi

# VÃ©rifier si Node.js est installÃ©
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

# VÃ©rifier si npm est installÃ©
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

print_status "VÃ©rification de Node.js: $(node --version)"
print_status "VÃ©rification de npm: $(npm --version)"

# CrÃ©er les rÃ©pertoires nÃ©cessaires s'ils n'existent pas
print_status "CrÃ©ation des rÃ©pertoires nÃ©cessaires..."

directories=(
    "assets/dist/js/blocks"
    "assets/dist/css/blocks"
    "assets/scss/blocks"
    "assets/js/blocks"
    "blocks"
)

for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        print_success "RÃ©pertoire crÃ©Ã©: $dir"
    fi
done

# Installation des dÃ©pendances npm
print_status "Installation des dÃ©pendances npm..."
npm install

if [ $? -eq 0 ]; then
    print_success "DÃ©pendances npm installÃ©es avec succÃ¨s"
else
    print_error "Ã‰chec de l'installation des dÃ©pendances npm"
    exit 1
fi

# VÃ©rifier si Composer est installÃ©
if command -v composer &> /dev/null; then
    print_status "Installation des dÃ©pendances Composer..."
    composer install --no-dev --optimize-autoloader
    
    if [ $? -eq 0 ]; then
        print_success "DÃ©pendances Composer installÃ©es avec succÃ¨s"
    else
        print_warning "Ã‰chec de l'installation des dÃ©pendances Composer"
    fi
else
    print_warning "Composer n'est pas installÃ©. Les dÃ©pendances PHP ne seront pas installÃ©es."
fi

# Compilation des assets
print_status "Compilation des assets..."

# Compiler en mode dÃ©veloppement d'abord pour vÃ©rifier les erreurs
npm run build

if [ $? -eq 0 ]; then
    print_success "Assets compilÃ©s avec succÃ¨s"
else
    print_error "Ã‰chec de la compilation des assets"
    exit 1
fi

# VÃ©rifier si les fichiers compilÃ©s existent
compiled_files=(
    "assets/dist/js/blocks-frontend.js"
    "assets/dist/js/blocks-editor.js"
    "assets/dist/css/blocks-frontend.css"
    "assets/dist/css/blocks-editor.css"
)

for file in "${compiled_files[@]}"; do
    if [ -f "$file" ]; then
        print_success "Fichier compilÃ©: $file"
    else
        print_warning "Fichier manquant: $file"
    fi
done

# VÃ©rifier les blocs spÃ©cifiques
if [ -f "assets/dist/js/blocks/hero-section.js" ]; then
    print_success "Bloc Hero Section compilÃ©: assets/dist/js/blocks/hero-section.js"
fi

if [ -f "assets/dist/css/blocks/hero-section.css" ]; then
    print_success "Styles Hero Section compilÃ©s: assets/dist/css/blocks/hero-section.css"
fi

# CrÃ©er un fichier .htaccess pour les assets si nÃ©cessaire
if [ ! -f "assets/.htaccess" ]; then
    print_status "CrÃ©ation du fichier .htaccess pour les assets..."
    cat > assets/.htaccess << 'EOF'
# Cache des assets pour 1 an
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
</IfModule>

# Compression gzip
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE image/svg+xml
</IfModule>
EOF
    print_success "Fichier .htaccess crÃ©Ã© pour optimiser les performances"
fi

# CrÃ©er un fichier de documentation rapide
print_status "CrÃ©ation de la documentation..."
cat > BLOCKS_README.md << 'EOF'
# Blocs PersonnalisÃ©s WordPress

## Structure des blocs

Chaque bloc doit avoir cette structure dans le dossier `blocks/`:

```
blocks/
â”œâ”€â”€ nom-du-bloc/
    â”œâ”€â”€ block.json          # Configuration du bloc
    â”œâ”€â”€ nom-du-bloc.twig    # Template Twig
    â”œâ”€â”€ fields.php          # Champs ACF
    â””â”€â”€ (optionnel)
```

## Assets des blocs

Les assets sont automatiquement dÃ©couverts et compilÃ©s:

- `assets/js/blocks/nom-du-bloc.js` â†’ `assets/dist/js/blocks/nom-du-bloc.js`
- `assets/scss/blocks/nom-du-bloc.scss` â†’ `assets/dist/css/blocks/nom-du-bloc.css`

## Commandes utiles

```bash
# DÃ©veloppement avec watch
npm run dev

# Compilation pour production
npm run build

# Compilation SCSS uniquement
npm run scss:build
```

## Exemple de bloc

Voir le bloc `hero-section` comme exemple complet.

## Variables CSS disponibles

```css
:root {
  --block-spacing: 2rem;
  --block-padding: 1.5rem;
  --primary-color: #667eea;
  --secondary-color: #764ba2;
  /* ... */
}
```
EOF

print_success "Documentation crÃ©Ã©e: BLOCKS_README.md"

# RÃ©sumÃ© final
echo ""
echo "=================================="
print_success "Configuration terminÃ©e avec succÃ¨s!"
echo "=================================="
echo ""
print_status "Que faire maintenant:"
echo "  1. Activez ACF Pro dans WordPress"
echo "  2. Activez le thÃ¨me custom-theme"
echo "  3. CrÃ©ez une nouvelle page et ajoutez le bloc 'Section Hero'"
echo "  4. Pour le dÃ©veloppement, utilisez: ${BLUE}npm run dev${NC}"
echo "  5. Pour la production, utilisez: ${BLUE}npm run build${NC}"
echo ""
print_status "Fichiers importants crÃ©Ã©s:"
echo "  - Bloc exemple: blocks/hero-section/"
echo "  - Assets compilÃ©s: assets/dist/"
echo "  - Documentation: BLOCKS_README.md"
echo ""
print_warning "N'oubliez pas d'installer et d'activer ACF Pro pour que les blocs fonctionnent!"
echo ""
